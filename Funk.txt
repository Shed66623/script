import tkinter as tk
from tkinter import ttk
import time
import threading

class WelcomeUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("欢迎主人")
        self.root.geometry("400x300")
        self.root.configure(bg='#f0f0f0')
        
        # 设置窗口居中
        self.center_window()
        
        # 创建主框架
        self.main_frame = tk.Frame(self.root, bg='#f0f0f0')
        self.main_frame.pack(expand=True, fill='both', padx=20, pady=20)
        
        # 欢迎标签
        self.welcome_label = tk.Label(
            self.main_frame, 
            text="欢迎主人回来！", 
            font=("微软雅黑", 20, "bold"),
            fg='#2c3e50',
            bg='#f0f0f0'
        )
        self.welcome_label.pack(pady=30)
        
        # 创建设置框架
        self.create_settings_frame()
        
        # 关闭按钮
        self.close_button = tk.Button(
            self.main_frame,
            text="关闭窗口",
            command=self.close_with_animation,
            font=("微软雅黑", 12),
            bg='#e74c3c',
            fg='white',
            padx=20,
            pady=5
        )
        self.close_button.pack(pady=20)
        
        # 绑定窗口关闭事件
        self.root.protocol("WM_DELETE_WINDOW", self.close_with_animation)
        
    def center_window(self):
        """将窗口居中显示"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry('{}x{}+{}+{}'.format(width, height, x, y))
    
    def create_settings_frame(self):
        """创建设置区域"""
        # 设置框架
        settings_frame = tk.LabelFrame(
            self.main_frame, 
            text="设置", 
            font=("微软雅黑", 12, "bold"),
            bg='#f0f0f0',
            fg='#2c3e50'
        )
        settings_frame.pack(fill='x', pady=10)
        
        # 主题设置
        theme_label = tk.Label(
            settings_frame, 
            text="主题颜色:", 
            font=("微软雅黑", 10),
            bg='#f0f0f0'
        )
        theme_label.grid(row=0, column=0, padx=10, pady=10, sticky='w')
        
        self.theme_var = tk.StringVar(value="蓝色")
        theme_combo = ttk.Combobox(
            settings_frame, 
            textvariable=self.theme_var,
            values=["蓝色", "绿色", "紫色", "橙色"],
            state="readonly",
            width=15
        )
        theme_combo.grid(row=0, column=1, padx=10, pady=10)
        theme_combo.bind("<<ComboboxSelected>>", self.change_theme)
        
        # 字体大小设置
        font_label = tk.Label(
            settings_frame, 
            text="字体大小:", 
            font=("微软雅黑", 10),
            bg='#f0f0f0'
        )
        font_label.grid(row=1, column=0, padx=10, pady=10, sticky='w')
        
        self.font_size = tk.IntVar(value=20)
        font_scale = tk.Scale(
            settings_frame, 
            from_=10, 
            to=30, 
            orient=tk.HORIZONTAL,
            variable=self.font_size,
            command=self.change_font_size,
            bg='#f0f0f0',
            length=150
        )
        font_scale.grid(row=1, column=1, padx=10, pady=10)
        
        # 自动关闭设置
        self.auto_close_var = tk.BooleanVar()
        auto_close_check = tk.Checkbutton(
            settings_frame,
            text="10秒后自动关闭",
            variable=self.auto_close_var,
            command=self.toggle_auto_close,
            bg='#f0f0f0',
            font=("微软雅黑", 10)
        )
        auto_close_check.grid(row=2, column=0, columnspan=2, padx=10, pady=10, sticky='w')
        
        # 调整列权重
        settings_frame.columnconfigure(1, weight=1)
    
    def change_theme(self, event=None):
        """更改主题颜色"""
        theme = self.theme_var.get()
        color_map = {
            "蓝色": "#3498db",
            "绿色": "#2ecc71",
            "紫色": "#9b59b6",
            "橙色": "#e67e22"
        }
        
        color = color_map.get(theme, "#3498db")
        self.welcome_label.config(fg=color)
        self.close_button.config(bg=color)
    
    def change_font_size(self, value):
        """更改字体大小"""
        size = int(float(value))
        self.welcome_label.config(font=("微软雅黑", size, "bold"))
    
    def toggle_auto_close(self):
        """切换自动关闭功能"""
        if self.auto_close_var.get():
            # 启动自动关闭线程
            self.auto_close_thread = threading.Thread(target=self.auto_close)
            self.auto_close_thread.daemon = True
            self.auto_close_thread.start()
    
    def auto_close(self):
        """自动关闭窗口"""
        for i in range(10, 0, -1):
            if not self.auto_close_var.get():
                break
            self.close_button.config(text=f"自动关闭({i}秒)")
            time.sleep(1)
        
        if self.auto_close_var.get():
            self.close_with_animation()
        else:
            self.close_button.config(text="关闭窗口")
    
    def close_with_animation(self):
        """带有动画效果的关闭窗口"""
        # 禁用按钮防止重复点击
        self.close_button.config(state=tk.DISABLED)
        
        # 创建关闭动画线程
        animation_thread = threading.Thread(target=self.animate_close)
        animation_thread.daemon = True
        animation_thread.start()
    
    def animate_close(self):
        """执行关闭动画"""
        # 淡出效果
        for i in range(10, 0, -1):
            alpha = i / 10.0
            self.root.attributes('-alpha', alpha)
            time.sleep(0.05)
        
        # 完全关闭窗口
        self.root.quit()
        self.root.destroy()
    
    def run(self):
        """运行UI"""
        self.root.mainloop()

# 创建并运行UI
if __name__ == "__main__":
    app = WelcomeUI()
    app.run()